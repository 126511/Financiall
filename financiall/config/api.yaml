openapi: 3.0.0
info:
  title: Financiall
  description: Finance It All using the all-in-one application Financiall.
  version: 0.0.1

servers:
  - url: http://localhost:8080
    description: when running on localhost

tags:
  - name: Users
    description: Handles everything to do with Users and their authentication.
  - name: Accounts
    description: Handles everything to do with Accounts.

components:
  schemas:
    UserObject:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The unique identifier of this user.
          example: 38547
        name:
          type: string
          description: The username as provided during registration.
          example: "croissant456"
        role:
          type: string
          description: The roles this user has.
          example: "member"

    UserDTO:
      type: object
      properties:
        name:
          type: string
          description: The username as chosen by the registering user.
          example: "croissant456"


paths:
  /users:
    post:
      summary: Register a new User.
      description: Adds a new User into the database based on the provided fields.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '201':
          description: User has been added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
        '400':
          description: Invalid request.
        '500':
          description: Internal server error.
    get:
      summary: Retrieve a User.
      description: Find a User in the database and return it based on its id.
      tags:
        - Users
      parameters:
        - in: query
          required: true
          description: The id of the User to get.
          name: id
          schema:
            type: integer
            format: int32
            example: 38547
      responses:
        '200':
          description: User has been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
        '400':
          description: Invalid request.
        '404':
          description: No User was found with that id.
        '500':
          description: Internal server error.

    put:
      summary: Update a User.
      description: Update the details of a User that already exists. The id of a user cannot be updated and will be used to identify the user, all other specified fields will be overwritten to the provided value. Roles cannot be updated through this API call, see `roles` to do that.
      tags:
        - Users
      parameters:
        - in: query
          required: true
          name: id
          description: The id of the User to update.
          schema:
            type: integer
            format: int32
            example: 38547
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: Updated has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
        '400':
          description: Invalid request.
        '404':
          description: No User was found with that id.
        '500':
          description: Internal server error.

    delete:
      summary: Delete a User.
      description: Delete an existing User from the database. This action is irreversible and will also delete all the objects (e.g. Accounts) a user has!
      tags:
        - Users
      parameters:
        - in: query
          required: true
          name: id
          description: The id of the User to delete
          schema:
            type: integer
            format: int32
            example: 38547
      responses:
        '200':
          description: User has been successfully deleted.
        '400':
          description: Invalid request.
        '404':
          description: No User was found with that id.
        '500':
          description: Internal server error.

